{{!-- TODO: include code snippets in docs
https://github.com/ef4/ember-code-snippet --}}

<div class="container">

  <h1 id="title">Ember TED select</h1>

  <h2>Examples</h2>

  <h3>Data-down, actions up</h3>

  {{ted-select
    content=TEDevents
    selectClassNames="form-control"
    optionLabelKey="name"
    optionValueKey="val"
    on-change=(action "update")
    selected=initialSelection
  }}

  <br>
  Initial selection: {{initialSelection.name}}
  <br>
  Updated by select: {{updatedBySelect.name}}

  <h3>two-way bound</h3>
  <p>If you would like to two-way bind to a property, pass that property into the `on-change` action using the `mut` helper.</p>

  {{ted-select
    content=TEDevents
    selectClassNames="form-control"
    optionLabelKey="name"
    optionValueKey="val"
    selected=selectedOption
    on-change=(action (mut selectedOption))
  }}

  <br>
  Selected: {{selectedOption.name}}

  <h3>Sorting the options list</h3>
  <p>To sort the options content, pass in the property of the options array with the `sortBy` property.</p>

  {{ted-select
    content=TEDevents
    selectClassNames="form-control"
    optionLabelKey="name"
    optionValueKey="val"
    sortBy="name"
  }}

  <h3>Disabling options</h3>
  <p>You can allow some options to be disabled by passing in a boolean object property to use as the disabled flag.</p>
  <p>eg. <code>optionDisabledKey="isTEDxEvent"</code></p>

  {{ted-select
    content=TEDevents
    selectClassNames="form-control"
    optionLabelKey="name"
    optionValueKey="val"
    optionDisabledKey="isTEDxEvent"
  }}

  <h3>Data-down, actions up, reset on select</h3>

  {{ted-select
    content=TEDevents
    selectClassNames="form-control"
    optionLabelKey="name"
    optionValueKey="val"
    on-change=(action "alsoUpdate")
    resetOnChange=true
  }}

  <br>
  Updated by select: {{alsoUpdatedBySelect.name}}
  {{#if alsoUpdatedBySelect}}
    <a {{action "clear"}}>Clear</a>
  {{/if}}

  <h3>Multi-select</h3>

  {{ted-select
    content=TEDevents
    selectClassNames="form-control"
    optionLabelKey="name"
    optionValueKey="val"
    multiple=true
    on-change=(action "updateMultiple")
  }}
  <br>
  <p>selected option(s): </p>
  <ul>
    {{#each selectedOptions as |option|}}
      <li>{{option.name}}</li>
    {{/each}}
  </ul>


  <h2>Configurable properties</h2>

  <table class="table table-bordered">
    <thead>
      <tr>
        <th>Property</th>
        <th>Purpose</th>
        <th>Default value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>optionLabelKey</code></td>
        <td>[optional] Specify a property of the content object to use as each option's <code>value</code> attribute.</td>
        <td><code>'id'</code></td>
      </tr>
      <tr>
        <td><code>optionValueKey</code></td>
        <td>[optional] Specify a property of the content object to use as each option's label.</td>
        <td><code>'title'</code></td>
      </tr>
      <tr>
        <td><code>optionDisabledKey</code></td>
        <td>[optional] Specify a boolean property of the content object to use as a flag for the <code>disabled</code>attribute.</td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td><code>multiple</code></td>
        <td>
          [optional] Boolean. When <code>true</code>, adds the <code>multiple</code> attribute to the rendered <code>&lt;select&lt;</code>element.<br>
          When active, the <code>on-change</code> action will pass an array of objects rather than a single selected object.
        </td>
        <td><code>false</code></td>
      </tr>
      <tr>
        <td><code>selectClassNames</code></td>
        <td>Adds one or more custom class names to the select element. Pass multiple classes as a space separated list: <code>form-control My-select</code></td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td><code>on-change</code></td>
        <td>
          Specify your own named action to trigger when the select value changes. Standard usage is: <code>(action "update")</code>. Your action handler will receive the new value, as a single value for a standard select or as an array if <code>multiple</code> is active.<br>
          You can also force a two-way binding by using the [`mut` helper](http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_mut). See <strong>two-way-bound</strong> for an example.
        </td>
        <td><code>Ember.K</code> (noop)</td>
      </tr>
      <tr>
        <td><code>resetOnChange</code></td>
        <td>
          [optional] Boolean. When <code>true</code>, clears the select element's value after a selection is made. Intended to be used with data-down, actions up only. Use with two-way binding at your own risk!
        </td>
        <td>
          <code>false</code>
        </td>
      </tr>
    </tbody>
  </table>


</div>

