{{!-- TODO: include code snippets in docs
https://github.com/ef4/ember-code-snippet --}}

<div class="container">

  <h1 id="title">Ember TED select</h1>

  <div class="row">
    <div class="col-md-7">
      <h4>A data-down actions up select component rendered with real DOM elements. Supports disabled options, multi-select, option sorting and custom prompt.</h4>
    </div>
  </div>

  <h2>Examples</h2>

  <h3>Data-down, actions up</h3>

  <div class="row">
    <div class="col-md-6">
      {{code-snippet name="ddau.hbs"}}
    </div>

    <div class="col-md-6">
      {{!-- BEGIN-SNIPPET ddau --}}
      {{ted-select
        content=TEDevents
        selectClassNames="form-control"
        optionLabelKey="name"
        optionValueKey="val"
        on-change=(action "update")
        selected=initialSelection
      }}
      {{!-- END-SNIPPET --}}
      <br>
      Initial selection: {{initialSelection.name}}
      <br>
      Updated by select: {{updatedBySelect.name}}
    </div>
  </div>


  <h3>Two-way bound</h3>
  <p>If you would like to two-way bind to a property, pass that property into the `on-change` action using the `mut` helper.</p>

  <div class="row">
    <div class="col-md-6">
      {{code-snippet name="two-way.hbs"}}
    </div>

    <div class="col-md-6">
      {{!-- BEGIN-SNIPPET two-way --}}
      {{ted-select
        content=TEDevents
        selectClassNames="form-control"
        optionLabelKey="name"
        optionValueKey="val"
        selected=selectedOption
        on-change=(action (mut selectedOption))
      }}
      {{!-- END-SNIPPET --}}
      <br>
      Selected: {{selectedOption.name}}
    </div>
  </div>


  <h3>Sorting the options list</h3>
  <p>To sort the options content, pass in the property of the options array with the `sortBy` property.</p>

  <div class="row">
    <div class="col-md-6">
      {{code-snippet name="sorted.hbs"}}
    </div>

    <div class="col-md-6">
      {{!-- BEGIN-SNIPPET sorted --}}
      {{ted-select
        content=TEDevents
        selectClassNames="form-control"
        optionLabelKey="name"
        optionValueKey="val"
        sortBy="name"
      }}
      {{!-- END-SNIPPET --}}
    </div>
  </div>

  <h3>Disabling options</h3>
  <p>You can allow some options to be disabled by passing in a boolean object property to use as the disabled flag.</p>

  <div class="row">
    <div class="col-md-6">
      {{code-snippet name="disabled.hbs"}}
    </div>

    <div class="col-md-6">
      {{!-- BEGIN-SNIPPET disabled --}}
      {{ted-select
        content=TEDevents
        selectClassNames="form-control"
        optionLabelKey="name"
        optionValueKey="val"
        optionDisabledKey="isTEDxEvent"
      }}
      {{!-- END-SNIPPET --}}
    </div>
  </div>

  <h3>Data-down, actions up, reset on select</h3>

  <div class="row">
    <div class="col-md-6">
      {{code-snippet name="disabled.hbs"}}
    </div>

    <div class="col-md-6">
      {{!-- BEGIN-SNIPPET disabled --}}
      {{ted-select
        content=TEDevents
        selectClassNames="form-control"
        optionLabelKey="name"
        optionValueKey="val"
        on-change=(action "alsoUpdate")
        resetOnChange=true
      }}
      {{!-- END-SNIPPET --}}

      <br>
      Updated by select: {{alsoUpdatedBySelect.name}}
      {{#if alsoUpdatedBySelect}}
        <a {{action "clear"}}>Clear</a>
      {{/if}}
    </div>
  </div>

  <h3>Multi-select</h3>

  <div class="row">
    <div class="col-md-6">
      {{code-snippet name="disabled.hbs"}}
    </div>

    <div class="col-md-6">
      {{!-- BEGIN-SNIPPET disabled --}}
      {{ted-select
        content=TEDevents
        selectClassNames="form-control"
        optionLabelKey="name"
        optionValueKey="val"
        multiple=true
        on-change=(action "updateMultiple")
      }}
      {{!-- END-SNIPPET --}}
      <br>
      <p>selected option(s): </p>
      <ul>
        {{#each selectedOptions as |option|}}
          <li>{{option.name}}</li>
        {{/each}}
      </ul>
    </div>
  </div>


  <h2>Configurable properties</h2>

  <table class="table table-bordered">
    <thead>
      <tr>
        <th>Property</th>
        <th>Purpose</th>
        <th>Expected Type</th>
        <th>Default value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>optionLabelKey</code></td>
        <td>[optional] Specify a property of the content object to use as each option's <code>value</code> attribute.</td>
        <td>string</td>
        <td><code>'id'</code></td>
      </tr>
      <tr>
        <td><code>optionValueKey</code></td>
        <td>[optional] Specify a property of the content object to use as each option's label.</td>
        <td>string</td>
        <td><code>'title'</code></td>
      </tr>
      <tr>
        <td><code>optionDisabledKey</code></td>
        <td>[optional] Specify a boolean property of the content object to use as a flag for the <code>disabled</code>attribute.</td>
        <td>string, null</td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td><code>multiple</code></td>
        <td>
          [optional] When <code>true</code>, adds the <code>multiple</code> attribute to the rendered <code>&lt;select&lt;</code>element.<br>
          When active, the <code>on-change</code> action will pass an array of objects rather than a single selected object.
        </td>
        <td>boolean</td>
        <td><code>false</code></td>
      </tr>
      <tr>
        <td><code>selectClassNames</code></td>
        <td>Adds one or more custom class names to the select element. Pass multiple classes as a space separated list: <code>form-control My-select</code></td>
        <td>string, null</td>
        <td><code>null</code></td>
      </tr>
      <tr>
      </tr>
      <tr>
        <td><code>prompt</code></td>
        <td>[optional] String or <code>null</code>. Sets the prompt text or hides the prompt option when set to <code>null</code>.</td>
        <td>string, null</td>
        <td><code>'Select an item'</code></td>
      </tr>
      <tr>
        <td><code>on-change</code></td>
        <td>
          Specify your own named action to trigger when the select value changes. Standard usage is: <code>(action "update")</code>. Your action handler will receive the new value, as a single value for a standard select or as an array if <code>multiple</code> is active.<br>
          You can also force a two-way binding by using the [`mut` helper](http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_mut). See <strong>two-way-bound</strong> for an example.
        </td>
        <td>Ember action</td>
        <td><code>Ember.K</code> (noop)</td>
      </tr>
      <tr>
        <td><code>resetOnChange</code></td>
        <td>
          [optional] When <code>true</code>, clears the select element's value after a selection is made. Intended to be used with data-down, actions up only. Use with two-way binding at your own risk!
        </td>
        <td>boolean</td>
        <td>
          <code>false</code>
        </td>
      </tr>
    </tbody>
  </table>


</div>

