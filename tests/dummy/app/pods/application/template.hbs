{{ted-page-header
  subheading='Ember'
  slim-heading='TED'
  strong-heading='Select'
  byline='A data down, actions up select component built with real DOM elements'
  github='http://github.com/tedconf/ember-ted-select'}}

<div class="container">

  <h2 id="installation">Installation</h2>
  <pre><code>ember install ember-ted-select</code></pre>

  <h2 id="features">Features</h2>
  <p><code>ember-ted-select</code> is a simple select element component that can do everything a native select element can do and more:</p>
  
  <ul>
    <li>disabled options</li>
    <li>multi-select</li>
    <li>custom prompt</li>
    <li>option sorting</li>
  </ul>
    
  <p>It uses the data down, actions up pattern to avoid problematic two-way data binding, and can be used as a replacement for the <a href="http://emberjs.com/deprecations/v1.x/#toc_ember-select">deprecated <code> &#123;&#123;view 'select'&#125;&#125;</code> helper</a>.</p>
  
  <h2 id="examples">Examples</h2>

  {{examples/basic-usage TEDevents=TEDevents}}
  {{examples/adding-styles TEDevents=TEDevents}}
  {{examples/initial-selection TEDevents=TEDevents}}
  {{examples/sorting-options TEDevents=TEDevents}}
  {{examples/disabling-options TEDevents=TEDevents}}
  {{examples/disabled-input TEDevents=TEDevents}}
  {{examples/named-input TEDevents=TEDevents}}
  {{examples/multi-select TEDevents=TEDevents}}
  {{examples/two-way-bound TEDevents=TEDevents}}

  <h2>Configurable properties</h2>

  <table class="table table-bordered">
    <thead>
      <tr>
        <th>Property</th>
        <th>Purpose</th>
        <th>Expected Type</th>
        <th>Default value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>content</code></td>
        <td>Pass in a content array to populate the select options. Each array element must be an object with properties for both the 'value' attribute and option label text.</td>
        <td>array</td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td><code>optionValueKey</code></td>
        <td>[optional] Specify a property of the content object to use as each option's <code>value</code> attribute.</td>
        <td>string</td>
        <td><code>'id'</code></td>
      </tr>
      <tr>
        <td><code>optionLableKey</code></td>
        <td>[optional] Specify a property of the content object to use as each option's label.</td>
        <td>string</td>
        <td><code>'title'</code></td>
      </tr>
      <tr>
        <td><code>optionDisabledKey</code></td>
        <td>[optional] Specify a boolean property of the content object to use as a flag for the <code>disabled</code>attribute.</td>
        <td>string, null</td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td><code>onchange</code></td>
        <td>
          Specify your own closure action to trigger when the select value changes. Standard usage is: <code>(action "update")</code>. Your action handler will receive the new value, as a single value for a standard select or as an array if <code>multiple</code> is active.<br>
          You can also force a two-way binding by using the [`mut` helper](http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_mut). See <strong>two-way-bound</strong> for an example.
        </td>
        <td>Ember action</td>
        <td><code>Ember.K</code> (noop)</td>
      </tr>
      <tr>
        <td><code>selected</code></td>
        <td>
          Pass in an initial selection or update the selected value from outside the component. Must match one of the options in the content array for single select, or be an array of objects for multi-select.
        </td>
        <td>Object, Array</td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td><code>sortBy</code></td>
        <td>[optional] Specify a property of the content array, or a commas separated list of properties, to use for sorting the options. Append <code>:desc</code> to a property to reverse the sort order. When set to null, options will remain in the order of the original array.</td>
        <td>string, null</td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td><code>multiple</code></td>
        <td>
          [optional] When <code>true</code>, adds the <code>multiple</code> attribute to the rendered <code>&lt;select&gt;</code>element.<br>
          When active, the <code>onchange</code> action will pass an array of objects rather than a single selected object.
        </td>
        <td>boolean</td>
        <td><code>false</code></td>
      </tr>
      <tr>
        <td><code>disabled</code></td>
        <td>[optional] Pass a boolean value in to disabled the entire input.</td>
        <td>boolean</td>
        <td><code>false</code></td>
      </tr>
      <tr>
        <td><code>name</code></td>
        <td>[optional] Add a name sttribute to the select element.</td>
        <td>string, null</td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td><code>selectClassNames</code></td>
        <td>Adds one or more custom class names to the select element. Pass multiple classes as a space separated list: <code>form-control My-select</code></td>
        <td>string, null</td>
        <td><code>null</code></td>
      </tr>
      <tr>
        <td><code>selectId</code></td>
        <td>Sets the ID on the select element.</td>
        <td>string, null</td>
        <td><code>null</code></td>
      </tr>
      <tr>
      </tr>
      <tr>
        <td><code>prompt</code></td>
        <td>[optional] String or <code>null</code>. Sets the prompt text or hides the prompt option when set to <code>null</code>.</td>
        <td>string, null</td>
        <td><code>'Select an item'</code></td>
      </tr>
    </tbody>
  </table>


</div>

